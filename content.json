{"meta":{"title":"放开那只大蒜的小站","subtitle":"","description":"记录技术上的点点滴滴","author":"GarlicGo","url":"http://garlicgo.github.io","root":"/"},"pages":[{"title":"关于","date":"2020-06-16T12:40:22.803Z","updated":"2020-06-16T12:40:22.803Z","comments":true,"path":"about/index.html","permalink":"http://garlicgo.github.io/about/index.html","excerpt":"","text":"这是一个稚嫩程序员儿分享学习经验的网站。 关于我职业：学生"},{"title":"所有分类","date":"2020-06-16T09:17:14.257Z","updated":"2020-06-16T09:17:14.257Z","comments":true,"path":"categories/index.html","permalink":"http://garlicgo.github.io/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-06-16T10:07:29.285Z","updated":"2020-06-16T10:07:29.285Z","comments":true,"path":"friends/index.html","permalink":"http://garlicgo.github.io/friends/index.html","excerpt":"","text":""},{"title":"","date":"2020-06-16T09:28:32.287Z","updated":"2020-06-16T09:28:32.287Z","comments":true,"path":"tags/index.html","permalink":"http://garlicgo.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-06-16T12:10:07.257Z","updated":"2020-06-16T12:10:07.257Z","comments":true,"path":"tools/index.html","permalink":"http://garlicgo.github.io/tools/index.html","excerpt":"","text":"一些小玩意儿"}],"posts":[{"title":"MyBatis部署环境时关于时区的一个小坑","slug":"MyBatis部署环境时关于时区的一个小坑","date":"2020-06-17T15:37:30.000Z","updated":"2020-06-17T15:41:55.465Z","comments":true,"path":"z_post/MyBatis部署环境时关于时区的一个小坑/","link":"","permalink":"http://garlicgo.github.io/z_post/MyBatis%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%E6%97%B6%E5%85%B3%E4%BA%8E%E6%97%B6%E5%8C%BA%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%9D%91/","excerpt":"今天配置MyBatis环境时遇到了一个关于MySQL时区设置的情况，配置好环境之后运行报了下面这种异常：","text":"今天配置MyBatis环境时遇到了一个关于MySQL时区设置的情况，配置好环境之后运行报了下面这种异常： 报错信息： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859Exception in thread \"main\" org.apache.ibatis.exceptions.PersistenceException: ### Error querying database. Cause: java.sql.SQLException: The server time zone value '?й???????' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support.### The error may exist in com/garlicgo/dao/IUserDao.xml### The error may involve com.garlicgo.dao.IUserDao.findAll### The error occurred while executing a query### Cause: java.sql.SQLException: The server time zone value '?й???????' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support. at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30) at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:149) at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147) at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80) at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:144) at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85) at com.sun.proxy.$Proxy2.findAll(Unknown Source) at com.garlicgo.test.MybatisTest.main(MybatisTest.java:38)Caused by: java.sql.SQLException: The server time zone value '?й???????' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support. at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129) at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89) at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63) at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73) at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:76) at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:836) at com.mysql.cj.jdbc.ConnectionImpl.&lt;init&gt;(ConnectionImpl.java:456) at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246) at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:197) at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:677) at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:189) at org.apache.ibatis.datasource.unpooled.UnpooledDataSource.doGetConnection(UnpooledDataSource.java:221) at org.apache.ibatis.datasource.unpooled.UnpooledDataSource.doGetConnection(UnpooledDataSource.java:216) at org.apache.ibatis.datasource.unpooled.UnpooledDataSource.getConnection(UnpooledDataSource.java:95) at org.apache.ibatis.datasource.pooled.PooledDataSource.popConnection(PooledDataSource.java:422) at org.apache.ibatis.datasource.pooled.PooledDataSource.getConnection(PooledDataSource.java:89) at org.apache.ibatis.transaction.jdbc.JdbcTransaction.openConnection(JdbcTransaction.java:138) at org.apache.ibatis.transaction.jdbc.JdbcTransaction.getConnection(JdbcTransaction.java:60) at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336) at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86) at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324) at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83) at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ... 7 moreCaused by: com.mysql.cj.exceptions.InvalidConnectionAttributeException: The server time zone value '?й???????' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the 'serverTimezone' configuration property) to use a more specifc time zone value if you want to utilize time zone support. at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500) at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481) at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61) at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:85) at com.mysql.cj.util.TimeUtil.getCanonicalTimezone(TimeUtil.java:132) at com.mysql.cj.protocol.a.NativeProtocol.configureTimezone(NativeProtocol.java:2118) at com.mysql.cj.protocol.a.NativeProtocol.initServerSession(NativeProtocol.java:2142) at com.mysql.cj.jdbc.ConnectionImpl.initializePropsFromServer(ConnectionImpl.java:1310) at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:967) at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:826) ... 27 more 这个就是需要设置一下时区，在主配置文件中数据库连接的URL后面加上 serverTimezone=GMT 就OK了。注意我这里没有加问号，但是下面截图中有一个问号，不明白的小伙伴只需要保证URL后面有且仅有一个问号就可以了。","categories":[{"name":"SSM学习笔记","slug":"SSM学习笔记","permalink":"http://garlicgo.github.io/categories/SSM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"SSM踩坑笔记","slug":"SSM学习笔记/SSM踩坑笔记","permalink":"http://garlicgo.github.io/categories/SSM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SSM%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"MyBatis","slug":"MyBatis","permalink":"http://garlicgo.github.io/tags/MyBatis/"},{"name":"MySQL","slug":"MySQL","permalink":"http://garlicgo.github.io/tags/MySQL/"}]},{"title":"【MyBatis系统拓荒笔记-1】MyBatis入门之混沌初开","slug":"【MyBatis系统拓荒笔记 - 1】MyBatis入门之混沌初开","date":"2020-06-17T13:39:36.000Z","updated":"2020-06-17T15:39:22.143Z","comments":true,"path":"z_post/【MyBatis系统拓荒笔记 - 1】MyBatis入门之混沌初开/","link":"","permalink":"http://garlicgo.github.io/z_post/%E3%80%90MyBatis%E7%B3%BB%E7%BB%9F%E6%8B%93%E8%8D%92%E7%AC%94%E8%AE%B0%20-%201%E3%80%91MyBatis%E5%85%A5%E9%97%A8%E4%B9%8B%E6%B7%B7%E6%B2%8C%E5%88%9D%E5%BC%80/","excerpt":"MyBatis是一款用Java编写的优秀的持久层框架，封装了JDBC 操作的很多细节，同时使用了ORM思想实现了结果集的封装，几乎避免了所有的 JDBC 代码、手动设置参数以及获取结果集，使开发者只需要关注sql语句本身，而无需关注注册驱动，创建连接等繁杂过程。","text":"MyBatis是一款用Java编写的优秀的持久层框架，封装了JDBC 操作的很多细节，同时使用了ORM思想实现了结果集的封装，几乎避免了所有的 JDBC 代码、手动设置参数以及获取结果集，使开发者只需要关注sql语句本身，而无需关注注册驱动，创建连接等繁杂过程。 MyBatis系统拓荒系列文章： 【MyBatis系统拓荒笔记 - 1】MyBatis入门之混沌初开视频学习教程：Mybatis教程IDEA版-4天-2018黑马SSM-01 目录 MyBatis简介 环境搭建 入门案例1、MyBatis简介1.1 MyBatis概述MyBatis是一款用Java编写的优秀的持久层框架，封装了JDBC 操作的很多细节，同时使用了ORM思想实现了结果集的封装，几乎避免了所有的 JDBC 代码、手动设置参数以及获取结果集。MyBatis可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java对象映射成数据库中的记录，使开发者只需要关注sql语句本身，而无需关注注册驱动，创建连接等繁杂过程。 框架：它是我们软件开发中的一套解决方案，不同的框架解决的是不同的问题使用框架的好处：框架封装了很多的细节，使开发者可以使用极简的方式实现功能。大大提高开发效率。 三层架构表现层：用于展示数据业务层：处理业务需求持久层：和数据库交互 ORM（Object Relational Mappging 对象关系映射）简单地说，就是把数据库表和实体类及实体类的属性对应起来，让我们可以操作实体类就实现操作数据库表。 1.2 持久层技术解决方案既然MyBatis是一种持久层的框架，那就不妨看看一些其他的持久层技术，瞧一瞧MyBatis的横向竞品，分别看看它们都有什么特点。 名称 介绍 特点 JDBC 是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口 是一种最为基本的规范，使用起来十分繁琐复杂 Spring的JdbcTemplate ​ JdbcTemplate是Spring的一部分，是Spring对JDBC的封装，目的是使JDBC更加易于使用。 只是对Jdbc的简单封装，还没到框架的级别 Apache的DBUtils Apache组织提供的一个对JDBC进行简单封装的开源工具类库，使用它能够简化JDBC应用程序的开发，同时也不会影响程序的性能。 它和Spring的JdbcTemplate很像，也是对Jdbc的简单封装，还没到框架的程度 Hibernate 这个名字应该就比较响亮了，大名鼎鼎的SSH中的H，一个开放源代码的对象关系映射框架，对JDBC进行了非常轻量级的对象封装同时可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。 批量数据处理时有弱势 MyBatis 上面说了，就不在此赘述了。 门槛低，入手快等（其他的一些特点，尤其是是和Hibernate的对比因为我能力有限这里就不多介绍了，有兴趣的同学可以去网上自行了解一下。） 提示：SSH是Struts+Spring+Hibernate的一个集成框架，之前较为流行，但是已经逐渐被SSM（Spring+SpringMVC+MyBatis）取代了。（这也是为什么我会来学习MyBatis的原因哈哈哈） 2、环境搭建2.1 安装MySQL因为我看的这个B站的教程是用的MySQL，所以我也使用的MySQL，没什么要说的安装就OK了，但是一定一定一定记住密码（血淋淋的教训）！ 2.2 创建数据库和表 2.3 创建maven工程不要选Create from archetypeGroupID：域名倒着写ArtifactID：我就比着视频上写的 day01_eesy_01mybatis然后一直Next，最后Finish就OK了，进入工程后再配置一下pom.xml，如下所示： 1234567891011121314151617181920212223242526272829303132&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.garlicgo&lt;/groupId&gt; &lt;artifactId&gt;day01_eesy_01mybatis&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.4&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.19&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.17&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.13&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 2.3 创建实体类和dao的接口目录层级IUserDao 123456789101112package com.garlicgo.dao;import com.garlicgo.domain.User;import java.util.List;//用户的持久层接口public interface IUserDao &#123; //查询所有操作 List&lt;User&gt; findAll();&#125; User 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364package com.garlicgo.domain;import java.io.Serializable;import java.util.Date;public class User implements Serializable &#123; private Integer id; private String username; private Date birthday; private String sex; private String address; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username; &#125; public Date getBirthday() &#123; return birthday; &#125; public void setBirthday(Date birthday) &#123; this.birthday = birthday; &#125; public String getSex() &#123; return sex; &#125; public void setSex(String sex) &#123; this.sex = sex; &#125; public String getAddress() &#123; return address; &#125; public void setAddress(String address) &#123; this.address = address; &#125; @Override public String toString() &#123; return \"User&#123;\" + \"id=\" + id + \", username='\" + username + '\\'' + \", birthday=\" + birthday + \", sex='\" + sex + '\\'' + \", address='\" + address + '\\'' + '&#125;'; &#125;&#125; 2.4 创建配置文件主配置文件：SqlMapConifg.xml 12345678910111213141516171819202122232425262728&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;!-- mybatis主配置文件--&gt;&lt;configuration&gt; &lt;!-- 配置环境--&gt; &lt;environments default=\"mysql\"&gt; &lt;!-- 配置mysql的环境--&gt; &lt;environment id=\"mysql\"&gt; &lt;!-- 配置事务的类型--&gt; &lt;transactionManager type=\"jdbc\"&gt;&lt;/transactionManager&gt; &lt;!-- 配置数据源（连接池）--&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;!-- 配置链接数据库的四个基本信息--&gt; &lt;property name=\"driver\" value=\"com.mysql.cj.jdbc.Driver\"/&gt; &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/eesy_mybatis?serverTimezone=GMT\"/&gt; &lt;property name=\"username\" value=\"root\"/&gt; &lt;property name=\"password\" value=\"123456\"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件--&gt; &lt;mappers&gt; &lt;mapper resource=\"com/garlicgo/dao/IUserDao.xml\"/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 映射配置文件：IUserDao.xml 1234567891011&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.garlicgo.dao.IUserDao\"&gt; &lt;!--配置查询所有 其中id不能乱写必须是dao接口中的方法 resultType写的是实体类的全路径--&gt; &lt;select id=\"findAll\" resultType=\"com.garlicgo.domain.User\"&gt; select * from user &lt;/select&gt;&lt;/mapper&gt; 最后可以再补上一个log4j.properties，主要是为了后面测试时使用： 123456789101112131415161718192021222324### 设置###log4j.rootLogger = debug,stdout,D,E### 输出信息到控制抬 ###log4j.appender.stdout = org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.Target = System.outlog4j.appender.stdout.layout = org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern = [%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n### 输出DEBUG 级别以上的日志到=E://logs/error.log ###log4j.appender.D = org.apache.log4j.DailyRollingFileAppenderlog4j.appender.D.File = E://logs/log.loglog4j.appender.D.Append = truelog4j.appender.D.Threshold = DEBUG log4j.appender.D.layout = org.apache.log4j.PatternLayoutlog4j.appender.D.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [ %t:%r ] - [ %p ] %m%n### 输出ERROR 级别以上的日志到=E://logs/error.log ###log4j.appender.E = org.apache.log4j.DailyRollingFileAppenderlog4j.appender.E.File =E://logs/error.log log4j.appender.E.Append = truelog4j.appender.E.Threshold = ERROR log4j.appender.E.layout = org.apache.log4j.PatternLayoutlog4j.appender.E.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [ %t:%r ] - [ %p ] %m%n 2.5 总结 第一个： 创建IUserDao.xml 和 IUserDao.java时名称是为了和我们之前的知识保持一致。在Mybatis中它把持久层的操作接口名称和映射文件也叫做：Mapper 所以：IUserDao 和 IUserMapper是一样的； 第二个： 在idea中创建目录的时候，它和包是不一样的 包 （Package） 在创建时：top.zoick.dao它是三级结构 目录（Directory） 在创建时：top.zoick.dao是一级目录 ，最新版应该创建全部是三级结构了； 第三个： mybatis的映射配置文件位置必须和dao接口的包结构相同； 第四个：映射配置文件的mapper标签namespace属性的取值必须是dao接口的全限定类名； 第五个：映射配置文件的操作配置（select），id属性的取值必须是dao接口的方法名当我们遵从了第三，四，五点之后，我们在开发中就无须再写dao的实现类。3、入门案例3.1 整体步骤 读取配置文件 创建SqlSessionFactory工厂 创建SqlSession 创建Dao接口的代理对象 执行dao中的方法 释放资源3.2 测试类 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package com.garlicgo.test;import com.garlicgo.dao.IUserDao;import com.garlicgo.domain.User;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import java.io.IOException;import java.io.InputStream;import java.util.List;/** * @author garlicgo * @date 2020/6/17 18:08 * mybatis的入门案例 */public class MybatisTest &#123; //入门案例 public static void main(String[] args) throws Exception &#123; //1.读取配置文件 InputStream in = Resources.getResourceAsStream(\"SqlMapConifg.xml\"); //2.创建SqlSessionFactory工厂 SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder(); SqlSessionFactory factory = builder.build(in); //3.使用工厂生产SqlSession对象 SqlSession session = factory.openSession(); //4.使用SqlSession创建Dao接口的代理对象 IUserDao userDao = session.getMapper(IUserDao.class); //5.使用代理对象执行方法 List&lt;User&gt; users = userDao.findAll(); for (User user: users) &#123; System.out.println(user); &#125; //6.释放资源 session.close(); in.close(); &#125;&#125;","categories":[{"name":"SSM学习笔记","slug":"SSM学习笔记","permalink":"http://garlicgo.github.io/categories/SSM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"MyBatis系统拓荒笔记","slug":"SSM学习笔记/MyBatis系统拓荒笔记","permalink":"http://garlicgo.github.io/categories/SSM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MyBatis%E7%B3%BB%E7%BB%9F%E6%8B%93%E8%8D%92%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://garlicgo.github.io/tags/Java/"},{"name":"MyBatis","slug":"MyBatis","permalink":"http://garlicgo.github.io/tags/MyBatis/"},{"name":"SSM","slug":"SSM","permalink":"http://garlicgo.github.io/tags/SSM/"},{"name":"持久层","slug":"持久层","permalink":"http://garlicgo.github.io/tags/%E6%8C%81%E4%B9%85%E5%B1%82/"},{"name":"框架","slug":"框架","permalink":"http://garlicgo.github.io/tags/%E6%A1%86%E6%9E%B6/"}]},{"title":"鼠标右键没有【用管理员身份运行命令行】时的解决办法","slug":"鼠标右键没有【用管理员身份运行命令行】时的解决办法","date":"2020-06-16T05:46:42.000Z","updated":"2020-06-16T11:20:19.886Z","comments":true,"path":"z_post/鼠标右键没有【用管理员身份运行命令行】时的解决办法/","link":"","permalink":"http://garlicgo.github.io/z_post/%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E6%B2%A1%E6%9C%89%E3%80%90%E7%94%A8%E7%AE%A1%E7%90%86%E5%91%98%E8%BA%AB%E4%BB%BD%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%E3%80%91%E6%97%B6%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"今天碰到了一个情况，要用管理员身份去执行一些指令。但是我右键点击某个文件或者文件夹时，没有“用管理员身份运行”这个选项，而且网上的某些做法在window10家庭版上并不可行，那该怎么办呢？","text":"今天碰到了一个情况，要用管理员身份去执行一些指令。但是我右键点击某个文件或者文件夹时，没有“用管理员身份运行”这个选项，而且网上的某些做法在window10家庭版上并不可行，那该怎么办呢？ 最后发现，搜索“命令提示符”，再右键点击“以管理员身份运行”，之后再切换到指定目录就行了。","categories":[],"tags":[]},{"title":"Hexo静态博客部署到GitHub访问乱版问题的解决","slug":"Hexo静态博客部署到GitHub访问乱版问题的解决","date":"2020-06-16T05:40:17.000Z","updated":"2020-06-16T11:20:59.762Z","comments":true,"path":"z_post/Hexo静态博客部署到GitHub访问乱版问题的解决/","link":"","permalink":"http://garlicgo.github.io/z_post/Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0GitHub%E8%AE%BF%E9%97%AE%E4%B9%B1%E7%89%88%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/","excerpt":"今天选了好久Hexo的皮肤，本地预览也没有任何问题，结果部署到GitHub再打开就一下乱版了","text":"今天选了好久Hexo的皮肤，本地预览也没有任何问题，结果部署到GitHub再打开就一下乱版了 目录 问题描述 解决方案 问题描述：下面是对比图： 本地预览 ↓部署后的效果 ↓瞬间心都碎了有没有！ 解决方案：搜来搜去也不知道是怎么回事，突然我想到我访问GitHub也一直有类似的情况（比如图片加载不出来，访问速度缓慢等等），会不会是这个原因导致的。之前我访问GitHub的情况 ↓![GitHub]](https://img-blog.csdnimg.cn/20200616133318134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjM2MzYw,size_16,color_FFFFFF,t_70)于是我按照网上的做法修改了host文件，具体操作如下：在系统目录： 1C:\\Windows\\System32\\drivers\\etc\\hosts 用编辑器打开此处的host文件，然后在文件最后加上如下代码： 123456789101112131415161718#GitHub Start192.30.253.112 Build software better, together192.30.253.119 gist.github.com151.101.184.133 assets-cdn.github.com151.101.184.133 raw.githubusercontent.com151.101.184.133 gist.githubusercontent.com151.101.184.133 cloud.githubusercontent.com151.101.184.133 camo.githubusercontent.com151.101.184.133 avatars0.githubusercontent.com151.101.184.133 avatars1.githubusercontent.com151.101.184.133 avatars2.githubusercontent.com151.101.184.133 avatars3.githubusercontent.com151.101.184.133 avatars4.githubusercontent.com151.101.184.133 avatars5.githubusercontent.com151.101.184.133 avatars6.githubusercontent.com151.101.184.133 avatars7.githubusercontent.com151.101.184.133 avatars8.githubusercontent.com#GitHub End 保存之后，可以发现我的GitHub加载正常了（速度还没测怎么样）↓然后再访问部署在GitHub上的Hexo博客，也恢复正常了↓","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://garlicgo.github.io/tags/Hexo/"},{"name":"静态博客","slug":"静态博客","permalink":"http://garlicgo.github.io/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"}]},{"title":"实用小技术：Excel+网易邮箱处理VCF与CSV文件批量添加联系人","slug":"实用小技术：Excel+网易邮箱处理VCF与CSV文件批量添加联系人","date":"2020-02-05T14:16:19.000Z","updated":"2020-06-16T11:17:09.430Z","comments":true,"path":"z_post/实用小技术：Excel+网易邮箱处理VCF与CSV文件批量添加联系人/","link":"","permalink":"http://garlicgo.github.io/z_post/%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E6%9C%AF%EF%BC%9AExcel+%E7%BD%91%E6%98%93%E9%82%AE%E7%AE%B1%E5%A4%84%E7%90%86VCF%E4%B8%8ECSV%E6%96%87%E4%BB%B6%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E8%81%94%E7%B3%BB%E4%BA%BA/","excerpt":"Excel+网易邮箱处理VCF与CSV文件批量添加联系人，简直不要太轻松。","text":"Excel+网易邮箱处理VCF与CSV文件批量添加联系人，简直不要太轻松。 目录 VCF与CSV文件简单介绍（真的是“简单”介绍） 为什么选择网易邮箱？（网易与QQ邮箱的简单对比） 利用Excel+网易邮箱生成CSV与VCF文件 利用网易邮箱解决CSV与VCF文件的乱码问题 一、VCF与CSV文件简单介绍 VCF是通讯录导出的一种格式，CSV是以纯文本形式存储表格数据的文件格式，其后缀名分别是.vcf、.csv。 百度百科：VCF 、CSV 看不懂？没关系。说实话我到现在都不知道我写的什么，只是为了高逼格地开个头，它们都能够存储跟联系人相关的信息。但是手机通信录和电脑通信录中的联系方式只能用VCF导入，同时也可以生成VCF文件。而一般的邮箱通信录（比如网易邮箱通信录、QQ邮箱通信录）既可以使用VCF导入联系方式，也可以使用CSV，同时也能生成这两种文件。 通过上图.csv的图标就可以看出，CSV文件是可以使用Excel打开的，长这个样子：但是VCF文件就比较复杂了，不可以使用Excel打开，用记事本打开是这个样子的：说了这么多，其实只是为了说明下面这个关系： 手机、电脑通信录：只能识别VCF文件，不能识别CSV文件，并且可以生成（导出）VCF文件。 VCF文件：可以通过通信录生成（导出）、也可以通过邮箱通信录生成（导出）。当然还有其他别的方式。 网易邮箱：可以识别VCF和CSV文件，也可以生成（导出）VCF和CSV文件。 CSV文件：可以导入邮箱通信录，也可以使用Excel打开，同时也可以使用邮箱通信录和Excel生成。 Excel：可以打开、生成（导出）CSV文件。 二、为什么选择网易邮箱？（网易与QQ邮箱的简单对比） 其实网易邮箱可以做的事情，QQ也同样能做。下面说一下我自己使用起来两者的优点。|名称| 优点 ||–|–|| 网易邮箱 | ①导入快，是真的快，几百人的VCF文件网易也就几秒，QQ邮箱得老半天；②当CSV文件字段内容和网易邮箱字段不同时会给提示。|| QQ邮箱 | ①可以使用QQ登录，对我来说更方便。 | 三、利用Excel+网易邮箱生成CSV与VCF文件 1.获得CSV文件，并添加信息重新导入 利用网易邮箱获取 点击网易邮箱通信录右侧的“导入导出→导出通信录”：↑选择CSV格式即可获得一份CSV格式文件，然后打开文件在字段中添加内容：↑↓将添加信息后的CSV文件保存，重新打开网易邮箱，点击“导入导出→从文件导入通信录”：↓选择好文件导入指定分组即可：↓ 利用Excel获取 除了利用邮箱导出字段较为完整的CSV文件，利用Excel也可以自己创建一些比较简单CSV文件，并添加一些数据。新建一个Excel表格，然后添加两个字段（姓名，手机），然后添加一些内容：↑然后另存为“CSV(逗号分隔)(*.csv)”，即可生成一个CSV文件（可导入邮箱通信录）：↑ 2.获得VCF文件，并将联系人导入手机、电脑通信录 利用网易邮箱获取 与利用网易邮箱获取CSV文件一样，点击网易邮箱通信录右侧的“导入导出→导出通信录”：↓然后将生成的文件发送给手机，使用手机通信录打开即可：↓ 四、利用网易邮箱解决CSV与VCF文件的乱码问题 其实除了上述的方式，有一种专门用来编辑VCF文件的软件叫做VCF Editor（如下图）：但是有些VCF文件用VCF Editor打开（或者CSV用Excel打开）会出现乱码的情况，如下图：此时只是打开的VCF的字符集的问题，把出现上述问题的VCF文件导入网易邮箱通信录是不会出现乱码的。只需要导入邮箱通信录，再使用邮箱生成VCF文件，新生成的VCF文件就不会出现乱码问题了。","categories":[],"tags":[{"name":"VCF","slug":"VCF","permalink":"http://garlicgo.github.io/tags/VCF/"}]},{"title":"Java的前世与今生","slug":"Java学习笔记（一）Java的前世与今生","date":"2019-05-13T09:37:22.000Z","updated":"2020-06-17T13:45:41.088Z","comments":true,"path":"z_post/Java学习笔记（一）Java的前世与今生/","link":"","permalink":"http://garlicgo.github.io/z_post/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89Java%E7%9A%84%E5%89%8D%E4%B8%96%E4%B8%8E%E4%BB%8A%E7%94%9F/","excerpt":"印度尼西亚有一个盛产咖啡的岛屿叫做Java，其中文译名为爪哇，SUN公司的开发人员为他们开发的一种新语言起名为Java，其寓意是“为世人端上一杯热咖啡”……","text":"印度尼西亚有一个盛产咖啡的岛屿叫做Java，其中文译名为爪哇，SUN公司的开发人员为他们开发的一种新语言起名为Java，其寓意是“为世人端上一杯热咖啡”…… 目录 什么是Java（概述、应用特点） Java的发展过程 1. 什么是Java 1.1 Java概述 1.2 Java的应用 1.3 Java的特点 1.1 Java概述 SUN公司的中文名称是太阳公司，其在2009年被Oracle（甲骨文）公司以56亿美元（74亿美元刨去SUN公司账上18亿美元的现金）收购。 Java具有面向对象、跨平台（操作系统）、安全、稳定和多线程等优良特性，是目前软件设计中优秀的编程语言。Java不仅可以用来开发大型的应用程序，而且特别适合于Internet应用的开发。Java确实具备了“一处编写，处处运行”第特点，这也是Java最初风靡全球的主要原因，并且时至今日仍为显露出将要衰退的征兆。 根据TIOBE排行榜在2019年11月份对语言流行指数的排名，Java再次蝉联了第一的位置。 《Java核心技术》在第一卷有过这样的描述：“作为一名程序设计人员，常常希望能够有一种语言，它具有令人赏心悦目的语法和易于理解的语义（C++不是这样的）。与许多其他的优秀语言一样，Java完全满足了这些要求。” Java是一个完整的平台，它有一个其他许多语言没有的庞大的库，其中包含了很多可重用的代码和一个提供诸如安全性、跨操作系统的可移植性以及自动垃圾回收集等服务，所以说Java是一种功能齐全的出色语言、是一个高质量的执行环境。 正是因为Java集多种优势于一身，所以对广大的程序设计人员有着不可抗拒的吸引力。 1.2 Java的应用 Java的应用非常广泛： 名称 内容 Android开发 Android手机上的APP几乎都是用Java开发的，例如微信、支付宝等。 桌面应用程序 Java也可以用来开发电脑上的软件，例如Eclipse、Netbeans。 网站 Java非常适合开发大型的企业网站，例如人人网、去哪儿网的后台都是Java。 嵌入式应用 Java在嵌入式领域发展空间很大。在这个平台上，只需130KB就能够使用Java技术（在智能卡或者传感器上）。 在金融业应用的服务器程序 Java在金融服务业的应用非常广泛，很多第三方交易系统、银行、金融机构都选择用Java开发，因为相对而言，Java较安全。 大数据技术 Hadoop以及其他大数据处理技术很多都是用Java，例如Apache的基于Java的HBase和Accumulo以及 ElasticSearchas。 高频交易的空间 Java平台提高了这个平台的特性和即使编译，他同时也能够像 C++ 一样传递数据。正是由于这个原因，Java成为的程序员编写交易平台的语言，因为虽然性能不比C++，但开发人员可以避开安全性，可移植性和可维护性等问题。 科学应用 Java在科学应用中是很好选择，包括自然语言处理。最主要的原因是因为Java比C++或者其他语言相对其安全性、便携性、可维护性以及其他高级语言的并发性更好。 桌面应用程序、企业级应用(网站)和Android是目前Java的主要应用方向。 Java成功地推出后不久，微软就发布了一个叫做J++的产品，它与Java有几乎相同的编程语言以及虚拟机。现在，微软不再支持J++，取而代之的是另一种名为C#的语言。C#与Java有很多相似之处，然而使用的却是完全不同的虚拟机。 1.3 Java的特点 名称 具体内容 简单性 Java剔除了C++中许多很少使用、难以理解、易混淆的特性。在目前看来，这些特性（如头文件、指针、虚基类等）带来的麻烦远远多于其带来的好处。所以说Java语法是C++语法的一个“纯净”版本，我甚至见过有人把Java称为“C++ -（C++减）”。 面向对象 开发Java时面向对象技术已经相当成熟。Java的面向对象特性与C++旗鼓相当。Java与C++的主要不同点在于多重继承，在Java中，取而代之的是更简单的接口概念。 分布式 Java有一个丰富的例程库，用于处理像HTTP和FTP之类的TCP/IP协议。 健壮性 Java编译器能够检测许多其他语言中仅在运行时才能够检测出来的问题。 安全性 Java适用于网络/分布式环境。为了达到这个目标，在安全方面投入了很大精力。使用Java可以构建防病毒、防篡改的系统。然而现在看来，Java的安全模式并没有原先预想的那么成功，但是在之前的时代Java确实相当超前。 体系结构中立 编译器生成一个体系结构中立的目标文件格式，这是一种编译过的代码，只要有Java运行时系统，这些编译后的代码可以在许多处理器上运行。（关于这一部分的详细内容可以查看我的另一篇博客《Java学习笔记（四）Java的编译运行过程》） 可移植性 与C和C++不同，Java规范中没有“依赖具体实现”的地方。基本数据类型的大小以及有关运算都做了明确的规定。 解释型 Java可以在任何移植了解释器的机器上执行Java字节码。 *高性能 现在的即时编译器已经非常出色，以至于成了传统编译器的竞争对手。在某些情况下，甚至超越了传统编译器，原因是他们含有更多的可用信息。 多线程 如今，我们非常关注并发性，因为摩尔定律的发展速度正在放缓。我们不仅再追求更快的处理器，同时着眼于获得更多的处理器，并且要让他们一直保持工作。而Java是第一个在语言级别提供内置多线程支持的高级语言，并且表现得非常出色。 动态性 从各种角度看，Java与C或C++相比更加具有动态性。它能适应不断发展的环境。库中可以自由地添加新方法和实例变量，而对客户端却没有任何影响。在Java中找出运行时类型信息十分简单。 2. Java的发展过程 SUN公司成立 “Green”计划 “Oak”语言的诞生 Java面世及其在SUN公司的发展 SUN公司被收购及Java在Oracle公司的发展 20世纪八九十年代是科技工业史上群星闪耀的时代。在以前AT&amp;T和IBM的时代需要半个世纪才能发生的事，可能在这里10年里一下子就发生并结束了。在这个大时代里，很多公司原本有可能成为信息工业的王者，却最终与机会失之交臂。这些公司，不论当初多么辉煌，当它开始走下坡路时，被人遗忘的速度比它衰落的速度更快。——《浪潮之巅（第三版·上册）》而SUN公司（其中文名为太阳公司）显然是这样一位曾经在信息产业叱咤风云却最后消失于江湖的争霸者。 SUN公司成立 Sun公司名称的由来是斯坦福大学校园网（Stanford University Network）的首字母缩写。当 Andy Bechtolsheim（安迪·贝克托森 ）还是斯坦福大学研究生时，他设计出一种“三个百万”的小型图形计算机，这在当时已经是很先进的了。 贝克托森开发出原型机 Sun-1 后，便于 1982 年和斯科特·马可尼里（Scott McNealy）等斯坦福毕业生从学校出来创办了Sun公司。 从斯坦福大学孵化出的高科技公司首推太阳公司，它也是最早进入中国市场并直接与中国政府开展技术合作的计算机公司。在2000年的高峰期，太阳公司在全球拥有5万雇员，市值超过2000亿美元，是2009年被甲骨文收购时56亿美元（74亿美元刨去太阳公司账上的18亿美元的现金）的30多倍，而2000年排名第二的科技公司Google市值峰值才1700亿美元，排名第三的IBM市值峰值为1600亿美元。——《浪潮之巅（第三版上册）》 “Green”计划 在上世纪90年代，硬件领域出现了单片式计算机系统，因为使用它可以大幅度提升消费类电子产品（如电视机顶盒、面包烤箱、移动电话等）的智能化程度，所以这种价格低廉的系统一出现就立即引起了自动控制领域人员的注意。 所以由Patrick Naughton（帕特里克·诺顿）和James Gosling（詹姆斯·高斯林）带领的Sun公司的工程小组便想要为这类消费设备设计一种小型计算机语言，主要用于像有线电视转换盒这类的消费设备。由于这些消费设备的处理能力和内存都很有限，所以语言必须非常小且能够生成非常紧凑的代码。另外，由于不同的厂商会选择不同的中央处理器（CPU），因此这种语言的关键是不与任何特定的体系结构捆绑在一起。最终这个项目被命名为“Green”（其中文名为“绿色计划”）。 开发目的使得这种语言不仅要代码短小、紧凑而且要与平台无关，这些要求就促使着开发团队设计一个可移植的语言，可以为虚拟机生成中间代码。 为“虚拟机”生成代码并不是一个新思路，诸如Lisp、Smalltalk和Pascal等编程语言多年前就已经采用了这种技术。 “Oak”语言的诞生 在1992年的夏天，这种语言开发成功，Gosling将这种语言命名为“Oak”（这么起名的原因大概是因为他非常喜欢自己办公室外的橡树）。 由于在开发Oak语言时，尚且不存在运行字节码的硬件平台，所以为了在开发时可以对这种语言进行实验研究，他们就在已有的硬件和软件平台基础上，按照自己所指定的规范，用软件建设了一个运行平台，整个系统除了比C++更加简单之外，没有什么大的区别。当Oak语言开发成功后，Green项目发布了它的第一个产品“*7”。研究者们向硬件生产商进行演示了Green操作系统、Oak的程序设计语言、类库和其硬件，以说服他们使用Oak语言生产硬件芯片，但是，硬件生产商并未对此产生极大的热情。因为他们认为，在所有人对Oak语言还一无所知的情况下，就生产硬件产品的风险实在太大了，所以Oak语言也就因为缺乏硬件的支持而无法进入市场，从而被搁置了下来。 Java面世及其在SUN公司的发展 Green项目后来更名为“First Person公司”，First Person公司花费了1993年整整一年的时间也没有找到一个其技术的买家。最终，在1994年First Person公司解散了。 1995年，互联网的蓬勃发展给了Oak机会。业界为了使死板、单调的静态网页能够“灵活”起来，急需一种软件技术来开发一种程序，这种程序可以通过网络传播并且能够跨平台运行。于是，世界各大IT企业为此纷纷投入了大量的人力、物力和财力。这个时候，Sun公司想起了那个被搁置起来很久的Oak，并且重新审视了那个用软件编写的试验平台，由于它是按照嵌入式系统硬件平台体系结构进行编写的，所以非常小，特别适用于网络上的传输系统，而Oak也是一种精简的语言，程序非常小，适合在网络上传输。Sun公司首先推出了可以嵌入网页并且可以随同网页在网络上传输的Applet（Applet是一种将小程序嵌入到网页中进行执行的技术），并将Oak更名为Java（在申请注册商标时，发现Oak已经是一种已有计算机语言的名字，再想了一系列名字之后，最终，使用了提议者在喝一杯Java咖啡时无意提到的Java词语，其寓意是“为世人端上一杯热咖啡”）。 5月23日，Sun公司在Sun world会议上正式发布Java和HotJava浏览器。IBM、Apple、DEC、Adobe、HP、Oracle、Netscape和微软等各大公司都纷纷停止了自己的相关开发项目，竞相购买了Java使用许可证，并为自己的产品开发了相应的Java平台。 1996年1月，Sun公司发布了Java的第一个开发工具包（JDK 1.0），这是Java发展历程中的重要里程碑，标志着Java成为一种独立的开发工具。而后Java得到不断的发展，在2006年11月13日，SUN公司宣布将Java技术作为免费软件对外发布。Sun公司正式发布了有关Java平台标准版的第一批源代码，以及Java迷你版的可执行源代码。从2007年3月起，全世界所有的开发人员均可对Java源代码进行修改。2009年，甲骨文公司宣布收购Sun 。2010年，Java编程语言的共同创始人之一James Gosling（詹姆斯·高斯林）从Oracle公司辞职。 Java在SUN公司发布的版本及其特性： 版本/年份/类与接口数量 新版本特性 1.0 / 1996 / 211 新语言发布 1.1 / 1997 / 477 内部类 1.2 / 1998 / 1524 strictfp修饰符 1.3 / 2000 / 1840 无 1.4 / 2002 / 2723 断言 5.0 / 2004 / 3279 泛型类、“for each”循环、可变元参数、自动装箱、元数据、枚举、静态导入 6 / 2006 / 3793 无 SUN公司被收购及Java在Oracle公司的发展 SUN公司从1982年成立到2000年达到顶峰用了将近20年时间，而走下坡路只用了一年。 从1986—2001年，太阳公司的营业额从2.1亿美元增至183亿美元，平均每年增长率高达36%。但当2000年互联网泡沫破碎时，它以服务器和工作站为主的硬件业务便急转直下。2002年财政年度（到2002年6月），它的营业额就比前一年跌掉了三成，并且从前一年盈利9亿美元转为亏损5亿美元。由于太阳公司找不到稳定的利润来源和新的增长点，从此太阳公司便江河日下，一下从硅谷最值钱的公司沦为人均市值最低的公司。——《浪潮之巅（第三版上册）》 在Oracle公司收购SUN公司时，SUN公司不仅有开源语言Java，还拥有开源操作系统Solaris和开源数据库MySQL。 对于Solaris操作系统，Oracle公司不再支持；对于MySQL和Java，主要用来和Google公司打版权官司。因为Google不仅是MySQL最大的用户，而且其旗下Android应用平台用的是Java却没有付过钱。虽然最终Oracle公司赢了官司，但是从经济上考虑却是两败俱伤。 Java语言在Oracle公司也得到了非常好的发展，尤其是Java8。 Java在Oracle公司发布的版本及其特性： 版本/年份/类与接口数量 新版本特性 7 / 2011 / 4024 基于字符串的switch、钻石操作符、二进制字面量、异常处理改进 8 / 2014 / 4240 lambda表达式，包含默认方法的接口，流和日期/时间库 9 / - / - —— 10 / - / - —— 11 / - / - —— 12 / - / - ——","categories":[{"name":"Java学习笔记","slug":"Java学习笔记","permalink":"http://garlicgo.github.io/categories/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://garlicgo.github.io/tags/Java/"},{"name":"历史","slug":"历史","permalink":"http://garlicgo.github.io/tags/%E5%8E%86%E5%8F%B2/"}]}],"categories":[{"name":"SSM学习笔记","slug":"SSM学习笔记","permalink":"http://garlicgo.github.io/categories/SSM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"SSM踩坑笔记","slug":"SSM学习笔记/SSM踩坑笔记","permalink":"http://garlicgo.github.io/categories/SSM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SSM%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/"},{"name":"MyBatis系统拓荒笔记","slug":"SSM学习笔记/MyBatis系统拓荒笔记","permalink":"http://garlicgo.github.io/categories/SSM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MyBatis%E7%B3%BB%E7%BB%9F%E6%8B%93%E8%8D%92%E7%AC%94%E8%AE%B0/"},{"name":"Java学习笔记","slug":"Java学习笔记","permalink":"http://garlicgo.github.io/categories/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"MyBatis","slug":"MyBatis","permalink":"http://garlicgo.github.io/tags/MyBatis/"},{"name":"MySQL","slug":"MySQL","permalink":"http://garlicgo.github.io/tags/MySQL/"},{"name":"Java","slug":"Java","permalink":"http://garlicgo.github.io/tags/Java/"},{"name":"SSM","slug":"SSM","permalink":"http://garlicgo.github.io/tags/SSM/"},{"name":"持久层","slug":"持久层","permalink":"http://garlicgo.github.io/tags/%E6%8C%81%E4%B9%85%E5%B1%82/"},{"name":"框架","slug":"框架","permalink":"http://garlicgo.github.io/tags/%E6%A1%86%E6%9E%B6/"},{"name":"Hexo","slug":"Hexo","permalink":"http://garlicgo.github.io/tags/Hexo/"},{"name":"静态博客","slug":"静态博客","permalink":"http://garlicgo.github.io/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"},{"name":"VCF","slug":"VCF","permalink":"http://garlicgo.github.io/tags/VCF/"},{"name":"历史","slug":"历史","permalink":"http://garlicgo.github.io/tags/%E5%8E%86%E5%8F%B2/"}]}